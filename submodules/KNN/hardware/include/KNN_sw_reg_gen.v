//This file was generated by script swreg2regmap.py

//address macros
`define KNN_RESET_ADDR 0
`define KNN_FINISHED_DATASET_ADDR 1
`define KNN_CALCULATING_CLASS_ADDR 2
`define KNN_DATASET_XY_ADDR 3
`define KNN_DATASET_CLASS_ADDR 4
`define KNN_DATAPOINT0_ADDR 5
`define KNN_DATAPOINT1_ADDR 6
`define KNN_DATAPOINT2_ADDR 7
`define KNN_DATAPOINT3_ADDR 8
`define KNN_DATAPOINT4_ADDR 9
`define KNN_DATAPOINT5_ADDR 10
`define KNN_DATAPOINT6_ADDR 11
`define KNN_DATAPOINT7_ADDR 12
`define KNN_DATAPOINT8_ADDR 13
`define KNN_DATAPOINT9_ADDR 14
`define KNN_DATAPOINT10_ADDR 15
`define KNN_DATAPOINT11_ADDR 16
`define KNN_DATAPOINT12_ADDR 17
`define KNN_DATAPOINT13_ADDR 18
`define KNN_DATAPOINT14_ADDR 19
`define KNN_DATAPOINT15_ADDR 20
`define KNN_CLASS0_ADDR 21
`define KNN_CLASS1_ADDR 22
`define KNN_CLASS2_ADDR 23
`define KNN_CLASS3_ADDR 24
`define KNN_CLASS4_ADDR 25
`define KNN_CLASS5_ADDR 26
`define KNN_CLASS6_ADDR 27
`define KNN_CLASS7_ADDR 28
`define KNN_CLASS8_ADDR 29
`define KNN_CLASS9_ADDR 30
`define KNN_CLASS10_ADDR 31
`define KNN_CLASS11_ADDR 32
`define KNN_CLASS12_ADDR 33
`define KNN_CLASS13_ADDR 34
`define KNN_CLASS14_ADDR 35
`define KNN_CLASS15_ADDR 36


//write registers
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 0), KNN_RESET, wdata[1-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 1), KNN_FINISHED_DATASET, wdata[1-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 3), KNN_DATASET_XY, wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 4), KNN_DATASET_CLASS, wdata[3-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 5), KNN_DATAPOINT[0], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 6), KNN_DATAPOINT[1], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 7), KNN_DATAPOINT[2], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 8), KNN_DATAPOINT[3], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 9), KNN_DATAPOINT[4], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 10), KNN_DATAPOINT[5], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 11), KNN_DATAPOINT[6], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 12), KNN_DATAPOINT[7], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 13), KNN_DATAPOINT[8], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 14), KNN_DATAPOINT[9], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 15), KNN_DATAPOINT[10], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 16), KNN_DATAPOINT[11], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 17), KNN_DATAPOINT[12], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 18), KNN_DATAPOINT[13], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 19), KNN_DATAPOINT[14], wdata[32-1:0])
`REG_ARE(clk, rst, 0, valid & wstrb & (address == 20), KNN_DATAPOINT[15], wdata[32-1:0])


//read registers
`SIGNAL(rdata_int,`DATA_W)
`SIGNAL2OUT(rdata, rdata_int)

always @* begin
   rdata_int = `DATA_W'd0;
   case(address)
     2: rdata_int = KNN_CALCULATING_CLASS | `DATA_W'd0;
     21: rdata_int = KNN_CLASS[0] | `DATA_W'd0;
     22: rdata_int = KNN_CLASS[1] | `DATA_W'd0;
     23: rdata_int = KNN_CLASS[2] | `DATA_W'd0;
     24: rdata_int = KNN_CLASS[3] | `DATA_W'd0;
     25: rdata_int = KNN_CLASS[4] | `DATA_W'd0;
     26: rdata_int = KNN_CLASS[5] | `DATA_W'd0;
     27: rdata_int = KNN_CLASS[6] | `DATA_W'd0;
     28: rdata_int = KNN_CLASS[7] | `DATA_W'd0;
     29: rdata_int = KNN_CLASS[8] | `DATA_W'd0;
     30: rdata_int = KNN_CLASS[9] | `DATA_W'd0;
     31: rdata_int = KNN_CLASS[10] | `DATA_W'd0;
     32: rdata_int = KNN_CLASS[11] | `DATA_W'd0;
     33: rdata_int = KNN_CLASS[12] | `DATA_W'd0;
     34: rdata_int = KNN_CLASS[13] | `DATA_W'd0;
     35: rdata_int = KNN_CLASS[14] | `DATA_W'd0;
     36: rdata_int = KNN_CLASS[15] | `DATA_W'd0;
     default: rdata_int = `DATA_W'd0;
   endcase
end
